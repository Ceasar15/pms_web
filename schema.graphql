# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: RootQuery
    mutation: RootMutation
    subscription: RootSubscription
}

type AddAllergy {
    allergy: AllergyType
}

type AddBranch {
    branch: BranchType
}

type AddDrug {
    drug: DrugType
}

type AddGroup {
    group: GroupType
}

type AddUser {
    user: UserType
}

type AddUserBranchesMutation {
    user: UserType
}

type AllergyType {
    id: UUID!
    name: String!
}

type AuthDataType {
    avatar: String
    branches: [BranchType!]!
    dateOfBirth: Date!
    email: String!
    firstName: String!
    gender: UserGender!
    "The groups this user belongs to. A user will get all permissions granted to each of their groups."
    groups: [GroupType!]!
    id: UUID!
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    phoneNumber: String!
    saleSet: [SaleType!]!
    supplySet: [SupplyType!]!
    token: String
    "Specific permissions for this user."
    userPermissions: [PermissionType!]!
}

type BranchType {
    id: UUID!
    name: String!
    users: [AuthDataType!]!
}

type DeleteGroup {
    group: GroupType
}

type DeleteGroups {
    groups: [GroupType]
}

type DrugType {
    costPricePerPack: Float!
    id: UUID!
    name: String!
    quantityPerPack: Int!
    salelineSet: [SaleLineType!]!
    sellingPrice: Float!
    supplylineSet: [SupplyLineType!]!
}

type EditGroup {
    group: GroupType
}

type GroupType {
    id: ID!
    name: String!
    permissions: [PermissionType!]!
    "The groups this user belongs to. A user will get all permissions granted to each of their groups."
    userSet: [AuthDataType!]!
}

"Obtain JSON Web Token mutation"
type ObtainJSONWebToken {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type PermissionType {
    codename: String!
    groupSet: [GroupType!]!
    id: ID!
    name: String!
    "Specific permissions for this user."
    userSet: [AuthDataType!]!
}

type RecordSale {
    sale: SaleType
}

type RecordSupply {
    supply: SupplyType
}

type Refresh {
    payload: GenericScalar!
    refreshExpiresIn: Int!
    token: String!
}

type Revoke {
    revoked: Int!
}

type RootMutation {
    addAllergy(name: String): AddAllergy
    addBranch(name: String): AddBranch
    addDrug(costPricePerPack: Decimal, name: String, quantityPerPack: Int, sellingPrice: Decimal): AddDrug
    addGroup(name: String, permissions: [Int]): AddGroup
    addUser(avatar: String, dateOfBirth: Date, email: String, firstName: String, gender: String, groups: [Int], lastName: String, phoneNumber: String): AddUser
    addUserBranches(branches: [UUID], userId: UUID): AddUserBranchesMutation
    deleteGroup(groupId: Int): DeleteGroup
    deleteGroups(groupIds: [Int]): DeleteGroups
    editGroup(id: Int, name: String, permissions: [Int]): EditGroup
    "Obtain JSON Web Token mutation"
    obtainToken(email: String!, password: String!): ObtainJSONWebToken
    recordSale(discount: Decimal!, saleLines: [SaleLineInputType], timestamp: DateTime!): RecordSale
    recordSupply(discount: Decimal!, freightCharge: Decimal!, supplier: String!, supplyDate: Date!, supplyLines: [SupplyLineInput]!, vat: Decimal!): RecordSupply
    refreshToken(token: String): Refresh
    revokeToken(refreshToken: String): Revoke
    verifyPasswordResetToken(token: String!, userId: UUID!): VerifyPasswordResetToken
    verifyToken(token: String): Verify
}

type RootQuery {
    allergies: [AllergyType]
    branches: [BranchType]
    drugs: [DrugType]
    groupById(groupId: Int): GroupType
    groups: [GroupType]
    hasPermission(permission: String): Boolean
    me: UserType
    permissions: [PermissionType]
    sales: [SaleType]
    stockLevel(drugId: UUID!, lotNumber: String): Int
    supplies: [SupplyType]
    userByEmail(email: String): UserType
    userById(userId: UUID): UserType
    users: [UserType]
}

type RootSubscription {
    hello: String
    stockLevel(drugId: UUID!): Int
}

type SaleLineType {
    drug: DrugType!
    id: UUID!
    quantity: Int!
    sale: SaleType!
    sellingPrice: Float!
}

type SaleType {
    attendant: AuthDataType!
    discount: Float!
    grandTotal: Float!
    id: UUID!
    saleLines: [SaleLineType!]!
    subTotal: Float!
    timestamp: DateTime!
}

type SupplyLineType {
    costPrice: Float!
    drug: DrugType!
    expiryDate: Date!
    id: UUID!
    lotNumber: String!
    quantity: Int!
    supply: SupplyType!
}

type SupplyType {
    discount: Float!
    freightCharge: Float!
    grandTotal: Float!
    id: UUID!
    receiver: AuthDataType!
    subTotal: Float!
    supplier: String!
    supplyDate: Date!
    supplyLines: [SupplyLineType!]!
    vat: Float!
}

type UserType {
    avatar: String
    branches: [BranchType!]!
    dateOfBirth: Date!
    email: String!
    firstName: String!
    gender: UserGender!
    "The groups this user belongs to. A user will get all permissions granted to each of their groups."
    groups: [GroupType!]!
    id: UUID!
    isStaff: Boolean!
    "Designates that this user has all permissions without explicitly assigning them."
    isSuperuser: Boolean!
    lastLogin: DateTime
    lastName: String!
    password: String!
    phoneNumber: String!
    saleSet: [SaleType!]!
    supplySet: [SupplyType!]!
    "Specific permissions for this user."
    userPermissions: [PermissionType!]!
}

type Verify {
    payload: GenericScalar!
}

type VerifyPasswordResetToken {
    valid: Boolean
}

"An enumeration."
enum UserGender {
    "Female"
    F
    "Male"
    M
}

input SaleLineInputType {
    drugId: UUID!
    id: UUID
    quantity: Decimal!
    sellingPrice: Decimal!
}

input SupplyLineInput {
    costPrice: Decimal!
    drugId: UUID!
    expiryDate: Date!
    lotNumber: String!
    quantity: Int!
}


"""
Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
in fields, resolvers and input.
"""
scalar UUID

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

"The `Decimal` scalar type represents a python Decimal."
scalar Decimal

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar